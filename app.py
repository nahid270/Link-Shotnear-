# ----------------------
# Imports
# ----------------------
import os
import string
import random
import datetime
from functools import wraps
from flask import Flask, request, jsonify, redirect, render_template_string
from pymongo import MongoClient
import jwt
from werkzeug.security import generate_password_hash, check_password_hash

# ----------------------
# App & DB Configuration
# ----------------------
app = Flask(__name__)

# ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∂‡¶ï‡ßç‡¶§‡¶ø‡¶∂‡¶æ‡¶≤‡ßÄ ‡¶è‡¶¨‡¶Ç ‡¶ó‡ßã‡¶™‡¶® SECRET_KEY ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï‡•§
# ‡¶è‡¶ü‡¶ø ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§
app.config["SECRET_KEY"] = os.getenv("SECRET_KEY", "a-very-strong-default-secret-key-for-dev")

# MongoDB ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶®‡•§ ‡¶è‡¶ü‡¶ø‡¶ì ‡¶è‡¶®‡¶≠‡¶æ‡ßü‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá‡•§
MONGO_URI = os.getenv("MONGO_URI", "mongodb://localhost:27017/shortener_db")
try:
    client = MongoClient(MONGO_URI)
    db = client.get_default_database() # URI ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶®‡¶ø‡¶ú‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶®‡¶ø‡ßü‡ßá ‡¶®‡ßá‡¶¨‡ßá
    # ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡¶∂‡¶® ‡¶ü‡ßá‡¶∏‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
    client.server_info()
    print("‚úÖ MongoDB connected successfully!")
except Exception as e:
    print(f"‚ùå Could not connect to MongoDB: {e}")
    # ‡¶ï‡¶æ‡¶®‡ßá‡¶ï‡ßç‡¶ü ‡¶®‡¶æ ‡¶π‡¶≤‡ßá ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã
    exit()

# ----------------------
# Helper Functions
# ----------------------

def token_required(f):
    """JWT Token ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶°‡ßá‡¶ï‡ßã‡¶∞‡ßá‡¶ü‡¶∞"""
    @wraps(f)
    def decorated(*args, **kwargs):
        auth_header = request.headers.get("Authorization")
        if not auth_header or not auth_header.startswith("Bearer "):
            return jsonify({"error": "Token is missing or invalid"}), 401

        token = auth_header.split(" ")[1]
        try:
            # Token ‡¶°‡¶ø‡¶ï‡ßã‡¶° ‡¶ï‡¶∞‡ßá payload ‡¶™‡¶æ‡¶ì‡ßü‡¶æ
            data = jwt.decode(token, app.config["SECRET_KEY"], algorithms=["HS256"])
            # ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ
            current_user = db.users.find_one({"username": data["username"]})
            if not current_user:
                return jsonify({"error": "User not found"}), 401
        except jwt.ExpiredSignatureError:
            return jsonify({"error": "Token has expired"}), 401
        except jwt.InvalidTokenError:
            return jsonify({"error": "Token is invalid"}), 401

        return f(current_user, *args, **kwargs)
    return decorated

def generate_unique_short_id():
    """‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶∏‡¶Ç‡¶ò‡¶∞‡ßç‡¶∑ ‡¶è‡ßú‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶á‡¶â‡¶®‡¶ø‡¶ï ‡¶∂‡¶∞‡ßç‡¶ü ‡¶Ü‡¶á‡¶°‡¶ø ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá"""
    while True:
        short_id = ''.join(random.choices(string.ascii_letters + string.digits, k=6))
        # ‡¶Ü‡¶á‡¶°‡¶ø‡¶ü‡¶ø ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶°‡¶æ‡¶ü‡¶æ‡¶¨‡ßá‡¶∏‡ßá ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
        if db.links.find_one({"short_id": short_id}) is None:
            return short_id

# ----------------------
# Routes
# ----------------------

@app.route("/")
def home():
    """‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡ßç‡¶≤‡¶ø‡¶ï‡ßá‡¶∂‡¶®‡ßá‡¶∞ ‡¶π‡ßã‡¶Æ‡¶™‡ßá‡¶ú, ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá API ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡ßá‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶Ü‡¶õ‡ßá"""
    return render_template_string("""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Simple Link Shortener</title>
        <style>
            body { font-family: sans-serif; line-height: 1.6; max-width: 600px; margin: 50px auto; padding: 20px; }
            h2 { color: #333; }
            p { color: #555; }
            b { color: #007BFF; }
            code { background-color: #f4f4f4; padding: 2px 5px; border-radius: 3px; }
        </style>
    </head>
    <body>
        <h2>üîó Simple Link Shortener API</h2>
        <p>Use the API endpoints to manage your links.</p>
        <p><b>Register a new user:</b> <code>POST /register</code></p>
        <p><b>Login to get a token:</b> <code>POST /login</code></p>
        <p><b>Shorten a URL:</b> <code>POST /shorten</code> (Requires JWT Authorization: Bearer token)</p>
        <p><b>View link stats:</b> <code>GET /stats/&lt;short_id&gt;</code> (Requires JWT Authorization)</p>
        <p><b>Admin Panel:</b> <code>GET /admin</code> (Requires admin user token)</p>
    </body>
    </html>
    """)

@app.route("/register", methods=["POST"])
def register():
    """‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶∞‡ßá‡¶ú‡¶ø‡¶∏‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø"""
    data = request.get_json()
    username = data.get("username")
    password = data.get("password")

    # ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶®
    if not username or not password:
        return jsonify({"error": "Username and password are required"}), 400

    if db.users.find_one({"username": username}):
        return jsonify({"error": "User with this username already exists"}), 409 # 409 Conflict

    # ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶™‡ßç‡¶≤‡ßá‡¶á‡¶® ‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü‡ßá ‡¶∏‡ßá‡¶≠ ‡¶®‡¶æ ‡¶ï‡¶∞‡ßá ‡¶π‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶ï‡¶∞‡ßá ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    hashed_password = generate_password_hash(password)
    db.users.insert_one({
        "username": username,
        "password": hashed_password,
        "is_admin": False # ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶á ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡ßü
    })
    return jsonify({"message": f"User '{username}' registered successfully!"}), 201 # 201 Created

@app.route("/login", methods=["POST"])
def login():
    """‡¶≤‡¶ó‡¶á‡¶® ‡¶ï‡¶∞‡ßá JWT ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø"""
    data = request.get_json()
    username = data.get("username")
    password = data.get("password")

    if not username or not password:
        return jsonify({"error": "Username and password are required"}), 400

    user = db.users.find_one({"username": username})

    # ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶π‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶ï‡¶∞‡¶æ ‡¶™‡¶æ‡¶∏‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶° ‡¶Æ‡¶ø‡¶≤‡¶õ‡ßá ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ
    if not user or not check_password_hash(user["password"], password):
        return jsonify({"error": "Invalid username or password"}), 401 # 401 Unauthorized

    # ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ, ‡¶Ø‡¶æ ‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶° ‡¶•‡¶æ‡¶ï‡¶¨‡ßá
    token = jwt.encode({
        "username": user["username"],
        "exp": datetime.datetime.utcnow() + datetime.timedelta(hours=24)
    }, app.config["SECRET_KEY"], algorithm="HS256")

    return jsonify({"token": token})

@app.route("/shorten", methods=["POST"])
@token_required
def shorten(current_user):
    """‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶∂‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï)"""
    data = request.get_json()
    original_url = data.get("url")

    if not original_url:
        return jsonify({"error": "URL is required"}), 400

    short_id = generate_unique_short_id()
    db.links.insert_one({
        "short_id": short_id,
        "original_url": original_url,
        "clicks": 0,
        "created_at": datetime.datetime.utcnow(),
        "user": current_user["username"]
    })
    return jsonify({"short_url": f"{request.host_url}{short_id}"}), 201

@app.route("/<short_id>")
def redirect_url(short_id):
    """‡¶∂‡¶∞‡ßç‡¶ü ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶∏‡¶≤ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá ‡¶∞‡¶ø‡¶°‡¶æ‡¶á‡¶∞‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø"""
    # find_one_and_update ‡¶è‡¶ï‡¶ü‡¶ø atomic ‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶®, ‡¶Ø‡¶æ ‡¶è‡¶ï‡¶∏‡¶æ‡¶•‡ßá find ‡¶è‡¶¨‡¶Ç update ‡¶ï‡¶∞‡ßá
    link = db.links.find_one_and_update(
        {"short_id": short_id},
        {"$inc": {"clicks": 1}}
    )
    if link:
        return redirect(link["original_url"])
    else:
        return jsonify({"error": "Link not found"}), 404

@app.route("/stats/<short_id>")
@token_required
def stats(current_user, short_id):
    """‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá‡¶∞ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶Ü‡¶¨‡¶∂‡ßç‡¶Ø‡¶ï)"""
    link = db.links.find_one({"short_id": short_id})

    if not link:
        return jsonify({"error": "Link not found"}), 404

    # ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá‡¶∞ ‡¶Æ‡¶æ‡¶≤‡¶ø‡¶ï ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá
    if link["user"] != current_user["username"] and not current_user.get("is_admin"):
        return jsonify({"error": "Access forbidden: you do not own this link"}), 403

    return jsonify({
        "original_url": link["original_url"],
        "short_url": f"{request.host_url}{short_id}",
        "clicks": link["clicks"],
        "created_by": link["user"],
        "created_at": link.get("created_at")
    })

@app.route("/admin")
@token_required
def admin(current_user):
    """‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ (‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø)"""
    if not current_user.get("is_admin"):
        return jsonify({"error": "Forbidden: Admins only"}), 403

    # password ‡¶´‡¶ø‡¶≤‡ßç‡¶° ‡¶¨‡¶æ‡¶¶ ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡¶¨ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ
    users = list(db.users.find({}, {"_id": 0, "password": 0}))
    # ‡¶∏‡¶¨ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï‡ßá‡¶∞ ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ
    links = list(db.links.find({}, {"_id": 0}))
    return jsonify({"users": users, "links": links})

# ----------------------
# Run (for local development)
# ----------------------
if __name__ == "__main__":
    # debug=True ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡¶∂‡¶®‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶â‡¶ö‡¶ø‡¶§ ‡¶®‡ßü
    app.run(debug=True, port=5001)
